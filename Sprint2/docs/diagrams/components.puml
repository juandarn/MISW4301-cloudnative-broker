@startuml components
!theme plain
skinparam shadowing false
skinparam linetype ortho
skinparam roundcorner 12
skinparam ArrowThickness 1
skinparam ArrowColor #555
skinparam defaultTextAlignment center
skinparam package {
  BackgroundColor white
  BorderColor #AAB
  FontColor #222
  BorderThickness 1
}
skinparam component {
  BackgroundColor white
  BorderColor #444
}
skinparam database {
  BackgroundColor white
  BorderColor #444
}
skinparam frame {
  BackgroundColor #F0F8FF
  BorderColor #2B6CB0
  FontColor #2B6CB0
  BorderThickness 1
}

frame env #aliceblue;line:blue;line.dashed;text:blue {
package "Users Microservice" as users_pkg {
  component "users_app" as users_app
  database  "users_db"  as users_db
}

package "Posts Microservice" as posts_pkg {
  component "posts_app" as posts_app
  database  "posts_db"  as posts_db
}

package "Offers Microservice" as offers_pkg {
  component "offers_app" as offers_app
  database  "offers_db"  as offers_db
}

package "Routes Microservice" as routes_pkg {
  component "routes_app" as routes_app
  database  "routes_db"  as routes_db
}

package "Scores Microservice" as scores_pkg {
  component "scores_app" as scores_app
  database  "scores_db" as scores_db
}

component "aggregator_service" as aggregator <<Orchestrator>>

}

' Conexiones internas (app -> su DB)
users_app  --> users_db
posts_app  --> posts_db
offers_app --> offers_db
routes_app --> routes_db
scores_app --> scores_db

' Orquestador consulta servicios de dominio
aggregator --> users_app
aggregator --> posts_app
aggregator --> offers_app
aggregator --> routes_app
aggregator --> scores_app

' Cliente externo
actor "user" as end_user
end_user --> aggregator : HTTP/REST (RF003/RF004/RF005)
end_user --> users_app  : HTTP/REST (endpoints base)
end_user --> posts_app  : HTTP/REST (endpoints base)
end_user --> offers_app : HTTP/REST (endpoints base)
end_user --> routes_app : HTTP/REST (endpoints base)
@enduml
